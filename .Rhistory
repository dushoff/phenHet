library(tidyverse)
library(ggplot2); theme_set(theme_bw())
library(viridis)
library(bbmle)
# Set Seeds
set.seed(13521)
## Initial true values:
T_B <- 0.04
T_Y <- 0.5
B <- T_B/(1-T_B)
Phi <- (T_Y/(1-T_Y))/B
print(B)
print(Phi)
NY_0 <- 100
N <- 1e6
r <- log(2)/3
true_pars <- c(NY_0=NY_0, r=r, B=B, Phi=Phi, N=1e6, T_B=T_B, T_Y=T_Y)
true_pars
## simulation
tmax <- 29
t<-c(0:tmax)
# Real number of infected
NY_t <- pmin(NY_0*exp(r*t), N)
# Real prevalence
Y_t <- NY_t/N
# Data frame to storage the data
dd<- data.frame(t,NY_t,Y_t)
# Real expected test proportion T
dd$T <- (1-dd$Y_t)*true_pars["T_B"]+dd$Y_t*true_pars["T_Y"]
# Real expected test positivity P
dd$P <- dd$Y_t*true_pars["T_Y"]/dd$T
### Observed testing number N T*:
dd$OTNum <-  with(c(as.list(true_pars), dd),
rpois(length(t), round(T*N))
)
### Observed positive count N T P*:
dd$OPNum <- with(c(as.list(true_pars), dd)
, rbinom(length(t), size = OTNum, prob=P)
)
### Observed testing proportion
dd$OT <- dd$OTNum/N
### Observed testing positivity
dd$OP <- dd$OPNum/dd$OTNum
### function to calculate negative log-likelihood:
LL <- function(B,Phi,NY_0,r,dd,N,tmax){
T_B <- B/(1+B)
T_Y <- B*Phi/(1+B*Phi)
t <- c(0:tmax)
## don't let number of infected exceed pop size
NY_t <- pmin(NY_0*exp(r*t), N)
# prevalence
Y_t <- NY_t/N
# Data frame to storage the data
df<- data.frame(t,NY_t,Y_t)
# expected test proportion T
df$T <- (1-df$Y_t)*T_B+df$Y_t*T_Y
### number of test as parameter:
df$TNum <- df$T*N
# expected test positivity P
df$P <- (df$Y_t*T_Y)/df$T
## with worse starting values, last entry of TNum is less
## than last entry of OPNum ... -> (-Inf) probability
out <- -sum(dpois(dd$OTNum, df$TNum,log = TRUE))-
sum(dbinom(dd$OPNum,df$TNum,df$P,log = TRUE))
return(out)
}
real_ML<-LL(B,Phi,NY_0,r,dd,N,tmax)
library(tidyverse)
library(ggplot2); theme_set(theme_bw())
library(viridis)
library(bbmle)
# Set Seeds
set.seed(13521)
## Initial true values:
T_B <- 0.04
T_Y <- 0.5
B <- T_B/(1-T_B)
Phi <- (T_Y/(1-T_Y))/B
print(B)
print(Phi)
NY_0 <- 100
N <- 1e6
r <- log(2)/3
true_pars <- c(NY_0=NY_0, r=r, B=B, Phi=Phi, N=1e6, T_B=T_B, T_Y=T_Y)
true_pars
## simulation
tmax <- 29
t<-c(0:tmax)
# Real number of infected
NY_t <- pmin(NY_0*exp(r*t), N)
# Real prevalence
Y_t <- NY_t/N
# Data frame to storage the data
dd<- data.frame(t,NY_t,Y_t)
# Real expected test proportion T
dd$T <- (1-dd$Y_t)*true_pars["T_B"]+dd$Y_t*true_pars["T_Y"]
# Real expected test positivity P
dd$P <- dd$Y_t*true_pars["T_Y"]/dd$T
### Observed testing number N T*:
dd$OTNum <-  with(c(as.list(true_pars), dd),
rbinom(length(t), size=T*N,prob=T)
)
dd$OTNum
library(tidyverse)
library(ggplot2); theme_set(theme_bw())
library(viridis)
library(bbmle)
# Set Seeds
set.seed(13521)
## Initial true values:
T_B <- 0.04
T_Y <- 0.5
B <- T_B/(1-T_B)
Phi <- (T_Y/(1-T_Y))/B
print(B)
print(Phi)
library(tidyverse)
library(ggplot2); theme_set(theme_bw())
library(viridis)
library(bbmle)
# Set Seeds
set.seed(13521)
## Initial true values:
T_B <- 0.04
T_Y <- 0.5
B <- T_B/(1-T_B)
Phi <- (T_Y/(1-T_Y))/B
print(B)
print(Phi)
NY_0 <- 100
N <- 1e6
r <- log(2)/3
true_pars <- c(NY_0=NY_0, r=r, B=B, Phi=Phi, N=1e6, T_B=T_B, T_Y=T_Y)
true_pars
## simulation
tmax <- 29
t<-c(0:tmax)
# Real number of infected
NY_t <- pmin(NY_0*exp(r*t), N)
# Real prevalence
Y_t <- NY_t/N
# Data frame to storage the data
dd<- data.frame(t,NY_t,Y_t)
# Real expected test proportion T
dd$TT <- (1-dd$Y_t)*true_pars["T_B"]+dd$Y_t*true_pars["T_Y"]
# Real expected test positivity P
dd$P <- dd$Y_t*true_pars["T_Y"]/dd$TT
### Observed testing number N T*:
dd$OTNum <-  with(c(as.list(true_pars), dd),
rbinom(length(t), size=T*N, prob=T)
)
### Observed testing number N T*:
dd$OTNum <-  with(c(as.list(true_pars), dd),
rbinom(length(t), size=TT*N, prob=TT)
)
dd$OTNum
df$TT
dd$TT
### Observed testing number N T*:
dd$OTNum <-  with(c(as.list(true_pars), dd),
rbinom(length(t), size=TT*N, prob=TT)
)
dd$OTNum
### Observed testing number N T*:
dd$OTNum <-  with(c(as.list(true_pars), dd),
rbinom(length(t), size=round(TT*N), prob=TT)
)
dd$OTNum
### Observed positive count N T P*:
dd$OPNum <- with(c(as.list(true_pars), dd)
, rbinom(length(t), size = OTNum, prob=P)
)
dd$OTNum
dd$OPNum
### Observed testing proportion
dd$OT <- dd$OTNum/N
### Observed testing positivity
dd$OP <- dd$OPNum/dd$OTNum
### function to calculate negative log-likelihood:
LL <- function(B,Phi,NY_0,r,dd,N,tmax){
T_B <- B/(1+B)
T_Y <- B*Phi/(1+B*Phi)
t <- c(0:tmax)
## don't let number of infected exceed pop size
NY_t <- pmin(NY_0*exp(r*t), N)
# prevalence
Y_t <- NY_t/N
# Data frame to storage the data
df<- data.frame(t,NY_t,Y_t)
# expected test proportion T
df$T <- (1-df$Y_t)*T_B+df$Y_t*T_Y
### number of test as parameter:
df$TNum <- df$T*N
# expected test positivity P
df$P <- (df$Y_t*T_Y)/df$T
## with worse starting values, last entry of TNum is less
## than last entry of OPNum ... -> (-Inf) probability
out <- -sum(dbinom(dd$OTNum, df$TNum, df$T,log = TRUE))-
sum(dbinom(dd$OPNum,df$TNum,df$P,log = TRUE))
return(out)
}
real_ML<-LL(B,Phi,NY_0,r,dd,N,tmax)
